receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4318 # Port for aggregated metrics

processors:
  streamingaggregation:
    window_size: 30s # Aggregate over 30-second windows
    max_memory_mb: 100 # Memory limit
    stale_data_threshold: 2m # Reset cumulative state after 2 minutes of no data
    metrics:
      - match: "temperature_celsius"
        aggregate_type: "average"
        labels:
          type: "keep"
          names: ["datacenter", "location"]

      # Counter aggregation examples
      # - match: "http_requests_total"
      #   aggregate_type: "sum"  # Total requests across all instances
      #   labels:
      #     type: "remove"
      #     names: ["instance"]  # Remove instance-specific labels, keep method/status/endpoint

      # Uncomment to test other counter strategies:
      # - match: "http_requests_total"
      #   aggregate_type: "average" # Average requests per instance
      #   labels:
      #     type: "keep"
      #     names: ["method", "status_code"] # Keep only HTTP semantics

      - match: "^http_requests_total$" # Use explicit regex anchors
        aggregate_type: "rate" # Requests per second (exported as gauge)
        labels:
          type: "remove"
          names: ["instance", "endpoint"] # Service-level rate by method/status

  metricstransform:
    transforms:
      - include: ".*"
        match_type: regexp
        action: update
        new_name: "aggregated_$$0"

  # Batch processor for efficiency (matches native-histogram-otel)
  batch:
    timeout: 5s
    send_batch_size: 100
    send_batch_max_size: 200

exporters:
  # Use prometheusremotewrite for proper native histogram support
  prometheusremotewrite:
    endpoint: "http://prometheus:9090/api/v1/write"
    tls:
      insecure: true
    resource_to_telemetry_conversion:
      enabled: true
    timeout: 60s
    retry_on_failure:
      enabled: true
      initial_interval: 1s
      max_interval: 30s
      max_elapsed_time: 120s
    add_metric_suffixes: false

service:
  pipelines:
    metrics:
      receivers: [otlp]
      processors: [streamingaggregation, metricstransform, batch]
      exporters: [prometheusremotewrite]

  telemetry:
    logs:
      level: debug
    metrics:
      level: detailed
      readers:
        - pull:
            exporter:
              prometheus:
                host: 0.0.0.0
                port: 8888
